import * as path from 'path';
import { CliOptions, ImportFilePathType } from './types';

export const mockTemplate = (
  baseURL: string,
  paths: ImportFilePathType[],
  options?: CliOptions
) => `/**
* This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
* Feel free to commit/edit it as you need.
*/
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from 'msw';
import { faker } from '@faker-js/faker';
${paths
  .map(
    path =>
      `import { ${path.apiHandlerName} } from './mockApi/${path.fileName}';`
  )
  .join('\n')}

faker.seed(1);

export const baseURL = '${baseURL}';
export const MAX_ARRAY_LENGTH = ${options?.maxArrayLength ?? 20};

let i = 0;
export const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
}

export const handlers = [
  ${paths.map(path => `...${path.apiHandlerName},`).join('\n')}
];

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  if (typeof window === 'undefined') {
    const { setupServer } = require('msw/node');
    const server = setupServer(...handlers);
    server.listen();
  } else {
    const worker = setupWorker(...handlers);
    worker.start();
  }
}
`;

export const mockApiTemplate = (
  outputFile: string,
  handlerName: string,
  handlersCode: string
) => {
  return `/**
  * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
  * Feel free to commit/edit it as you need.
  */
  /* eslint-disable */
  /* tslint:disable */
  import { setupWorker, rest } from 'msw';
  import { faker } from '@faker-js/faker';
  import { baseURL, MAX_ARRAY_LENGTH, next } from '../${outputFile.replace(
    path.extname(outputFile),
    ''
  )}';

  export const ${handlerName} = [
    ${handlersCode}
  ];

  `;
};
